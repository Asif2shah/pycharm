# {0} = Inspection|Dependency Analysis|Duplication Analysis
specify.analysis.scope=指定 {0} 范围
analysis.scope.title={0} 范围
scope.option.whole.project=整个项目
scope.option.module=模块 ''{0}''
scope.option.module.with.mnemonic=&模块 ''{0}''
scope.option.custom=&自定义范围
scope.option.include.test.sources=包括测试源
scope.project=项目 ''{0}''
scope.file=文件 ''{0}''
scope.directory=目录 ''{0}''
scope.package=package {0}

# {0} module list comma separated, {1} - module count
scope.module.list={1, choice, 1#Module|2#Modules} {0}

#actions
action.rerun.dependency=重新运行依赖关系分析
action.group.by.scope.type=Group by Scope Type
action.group.by.scope.type.description=Group by Scope Type (production, test, libraries)
action.show.files=显示文件
action.show.files.description=显示/隐藏文件
action.close.dependency.description=关闭依赖关系查看器
action.close.modules.dependencies.description=关闭模块的依赖关系查看器
action.module.dependencies.direction=依赖关系的方向
action.analyzing.cyclic.dependencies.in.scope={0}的循环依赖关系
action.analyze.verb=分析
action.analysis.noun=分析
action.cyclic.dependency.title=循环依赖关系分析
action.flatten.packages=Flatten Packages
action.show.modules=显示模块
action.show.modules.description=显示/隐藏 模块
action.show.illegals.only=只显示非法的
action.show.illegals.only.description=只显示有非法依赖性的文件
action.edit.rules=编辑规则
action.edit.rules.description=编辑依赖关系规则
action.select.in.left.tree=选择在左侧结构树
action.select.in.left.tree.description=从左边的目录树中选择要浏览的依赖关系
action.forward.dependency.analysis=依赖关系分析
action.backward.dependency.analysis=Backward Dependency Analysis


cyclic.dependencies.scope.dialog.title=Specify {0} Scope
cyclic.dependencies.scope.dialog.project.button={0} the whole &project
cyclic.dependencies.scope.dialog.module.button={0} &module ''{1}''
cyclic.dependencies.tree.cycle.node.text=cycle
cyclic.dependencies.usage.view.root.node.text=Usages of package ''{0}'' in package ''{1}''
cyclic.dependencies.usage.view.initial.text=Select package to analyze from the left tree
cyclic.dependencies.progress.text=Building dependencies graph

module.dependencies.cycle.node.text=Cycle{0}
module.dependencies.scope.dialog.module.button=Inspect &module ''{0}''
module.dependencies.scope.dialog.project.button=Inspect the whole &project
module.dependencies.scope.dialog.title=Specify Analysis Scope
module.dependencies.toolwindow.title={0}

backward.dependencies.usage.view.root.node.text=Usages of the left tree scope selection in the right tree scope selection
backward.dependencies.usage.view.initial.text=Select where to search in right tree and what to search in left tree.

forward.dependencies.usage.view.root.node.text=Usages of the right tree scope selection in the left tree scope selection
forward.dependencies.usage.view.initial.text=Select where to search in left tree and what to search in right tree.

package.dependencies.progress.title=Analyzing Dependencies
package.dependencies.progress.text=Analyzing package dependencies
backward.dependencies.progress.text=Analyzing Backward Dependencies

find.dependencies.progress.text=Searching for usages in: {0}
usage.view.canceled=Canceled
package.dependencies.toolwindow.title=Dependencies of {0}
package.dependencies.on.toolwindow.title=Dependencies of {0} on {1}
no.dependencies.found.message=No dependencies of {0} on {1} found.
backward.dependencies.toolwindow.title=Backward Dependencies of {0}
package.dependencies.build.progress.text=Scanning packages
package.dependencies.build.process.title=Scanning Packages

#dependencies tree nodes text
package.dependencies.library.node.text=Library Classes
package.dependencies.test.node.text=Test Classes
package.dependencies.production.node.text=Production Classes
unknown.node.text=<unknown>
package.dependencies.node.items.count= {0, choice, 1#1 entry|2#{0, number} entries}
dependencies.tree.node.default.package.abbreviation=<default package>

#scope selector
dependencies.libraries.node.text=Libraries
error.packageset.common.expectations=(test|lib|src)[modulename] expected before :
error.packageset.token.expectations=Unexpected ''{0}''
error.packageset.pattern.expectations=Package pattern expected
error.packageset.rparen.expected=')' expected
error.packageset.position.parsing.error={0} at position {1}

#dependencies configurations
status.bar.no.rule.violation.message=No rules are violated
status.bar.rule.violation.message=The following rule{0, choice, 1# is|2#s are} violated: {1}
dependency.configurable.display.name=依赖关系验证
dependency.configurable.deny.table.column1=Deny usages of
dependency.configurable.deny.table.column2=in
dependency.configurable.allow.table.column1=Allow usages of
dependency.configurable.allow.table.column2=only in

scope.display.name.deny.scope=Deny usages of scope ''{0}'' in scope ''{1}''
scope.display.name.allow.scope=Allow usages of scope ''{0}'' in scope ''{1}''
scope.option.uncommited.files=&Uncommitted files
scope.option.uncommited.files.all.changelists.choice=All
scanning.scope.progress.title=Scanning scope ...
analyzing.project=Analyzing Project
checking.class.files=Checking Class Files
recompile.confirmation.message=Project class files are out of date. \nDo you want to compile a project before continuing DSM analysis?\nThe refusal to do it might result in incomplete or incorrect data.
project.is.out.of.date=Project Is Out Of Date
skip.import.statements.checkbox.title=跳过导入语句
mark.dependency.illegal.text=标记非法依赖关系
scope.selected.files=选定的文件
update.module.tree.progress.title=更新模块树
update.module.tree.progress.text=Process module ''{0}'' cycles
scope.virtual.files=selection
